# Documentation for the Mozmill Repository

There are several entry points where it is desirable to have documentation available:

- the MDN project page(s) for mozmill: https://developer.mozilla.org/en/Mozmill

- the mozmill github repository: http://github.com/mozautomation/mozmill

- the python package index: http://pypi.python.org/pypi/mozmill

- in a source checkout alongside the code

- on the AMO page: https://addons.mozilla.org/en-US/firefox/addon/9018/

Currently, our documentation is inconsistent and incomplete, with
different pieces of documentation living in different places.  Going
forward, we should make this documentation consistent and available at
each of these places.  We should make it easy for developers to update
and add documentation as well as having accurate documentation
versioned with the repository and aspire to the principle of DRY as
much as practicable.  Documentation should be a maintainable
and high-quality resource.


### Where the Documentation Lives

Several packages exist in the [mozmill repository](http://github.com/mozautomation/mozmill):

* [mozmill](https://developer.mozilla.org/en/Mozmill) : driver,
  event-dispatcher, and test harness

* jsbridge : python to JavaScript bridge interface

* mozrunner : Handles start/stop automation of Mozilla applications

* mozprofile : handling of Mozilla XUL app profiles

* mozprocess : low-level process management

* mozinfo : gather system information

* mutt : test harness for mozmill and other denizens of the Mozmill
  repo

Each of these packages contains a 'README' file as well as 
possibly various other documentation files in a 'docs/'
directory. These markdown files serve as the documentation canon. 


### Where the Documentation Goes

By being careful in how we organize and present information, we can
use the canonical sources in the repo to give a complete and
consistent documentation story:

- github will automation display README files present in directories

- the python `setup.py` files can read the contents of the README
  files in their directories and they will be available when the
  package is distributed to PyPI

- the markdown will be rendered and uploaded to
  http://developer.mozilla.org in accordance to a manifest

As of yet, it is undecided what to do about the AMO documentation.  It
is probably best to have a `mozmill/docs/extension.txt`, but until we
work out that story this will be done by hand.


### How to Update Documentation

We would love any sort of help with our documentation!  

- if at all possible, make a branch with your documentation changes
  and issue a pull request to http://github.com/mozautomation ; this
  is the most direct way to ensure that your documentation is included 

- edit the MDN documents: we will go to some effort to include edits
  in the upstream documentation


### How to Update Documentation on MDN

The documents for the mozmill repository are enumerated in the
`docs.manifest` file for mirroring to MDN
